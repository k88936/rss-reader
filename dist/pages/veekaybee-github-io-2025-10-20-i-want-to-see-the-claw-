<p>I respect quality software and the people who write it. And, I’ve invested years of my life in working on becoming one of these people (<a href="https://vickiboykis.com/2021/09/23/reaching-mle-machine-learning-enlightenment/">even if the journey has been long and hard</a> and has involved lots of YAML). I have seen and used code written by people who care about software correctness, who get pleasure out of defining correct interfaces, who have <a href="https://vickiboykis.com/2025/09/09/walking-around-the-app/">walked the app</a>, who have spent years working towards mastery. And, I have seen and written the code the rest of us write.</p>
<p>Selfishly, I want more people to aspire to mastery, because wanting to be good at writing code means you care about the code, but more importantly, about the people on the other end of the code. And, I want a world where developers care about other developers and users. I want a world of teams of seniors shipping good code and mentoring juniors and working with product managers and open-source committers. I don’t want a world where three agents in a trenchcoat from whichever AI lab is better this week quietly churn out CRUD slop that I approve out of the corner of my brain every thirty minutes.</p>
<p>Perhaps the first time I understood the value of mastery and care was my first job out of college, where I, a baby analyst, handed in a report to my senior analyst to check. “Did you double-check that SQL to make sure it’s correct, ” she asked. I had not, and when she ran my data, she got different results. I learned to always check my work.</p>
<p>A bit later, I worked with a senior architect trying to extract data into a relational database from a schemaless store. I watched him setting up for days, first preparing a staging environment and backups, then running and re-running again and again, carefully timestamping the files so he could roll back to an earlier run. Often, when I watched, his chair was empty - he was in meetings with the team who owned the database, making sure that when he hit their service to extract the data it didn’t fall over and impact them. Finally, when he was done, he wasn’t done. He checked it against the downstream reporting we were doing to make sure the numbers matched.</p>
<p>There is no single element that comprises this quality of care, the striving towards excellence and mastery. But, as Bernoulli said when he received an anonymous solution to the <a href="https://mathworld.wolfram.com/BrachistochroneProblem.html">brachistochrone</a> problem that turned out to be Isaac Newton, “I recognize the lion by its claw.”</p>
<p>There is a great recent post that posits that most industry programmers are <a href="https://www.seangoedecke.com/pure-and-impure-engineering/">impure engineers</a>: we will always be up against business constraints and reality, and do not have the time and luxury that pure engineers, who care about only the heart of the technical solution, to care about quality.</p>
<p>But over and over in my career, as I tuned <a href="https://vickiboykis.com/2024/12/16/write-code-with-your-alphabet-radio-on/"> my alphabet radio</a>, I came to consistently understand that intent matters. Even if we are, almost all of us, impure engineers and mere mortals and the sprint is ending in two days but I haven’t finished my t-shirt size medium task yet, the closer impure engineers <a href="https://tidyfirst.substack.com/p/mastering-programming">strove to work at the level of purity</a> (and did their second job <a href="https://jacobian.org/2017/nov/1/you-have-two-jobs/">of being easy to work with</a>), the more I wanted to both work with them and use their software.</p>
<p>I recognize the claw of the lion in software like Redis, cURL, uv, Ghostty, sqlite, llama.cpp - software that is elegant, well-built, considered and thoughtful. Software that is joyful to use. Software that helps me. I want to write software like this, and I want to use software like this, and I want us as programming people to be incentivized to value the process that creates software like this.</p>
<p>It has, with generative code, become harder and harder to strive towards the lions because the models produce code that is, quite literally, mid, the compressed and weighted average of every excellent Stack Overflow answer, but also questions like, “<a href="https://stats.stackexchange.com/questions/185507/what-happens-if-the-explanatory-and-response-variables-are-sorted-independently">What happens if the explanatory and response variables are sorted independently before regression?</a>” It is the average of all publicly available software, updated at some cadence and mixed into training data soup and then RLHFed according to some arbitrary metrics, and as such can only offer a ghost of quality.</p>
<p>We are being <a href="https://daniel.haxx.se/blog/2025/08/18/ai-slop-attacks-on-the-curl-project/">overrun by mediocrity</a> and sloppiness, <a href="https://github.com/ghostty-org/ghostty/pull/8289">we are trying</a> to fight against it, and yet, no matter how good the models and ecosystems around them get, I find myself more and more wanting software that I know is written with humans at the wheel - <a href="https://antirez.com/news/153">we are still better</a> at reasoning, at aesthetic judgment, at architecture.</p>
<p>The best code is no code, <a href="https://www.stilldrinking.org/programming-sucks"> programming still sucks</a> and always will, and yet, I find myself still searching for the claw, the mark of mastery. Because that mark comes from people who want to reach other people directly. I want to see the claw, because if there is a claw, it means there is a living, breathing lion on the other side of the screen building the software that elevates us and binds us together as a community of software engineers.</p>